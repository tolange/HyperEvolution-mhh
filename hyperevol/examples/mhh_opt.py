''' This script runs the Particle swarm optimization (PSO) to optimize the HEFT basis
Call with 'python'

Usage: rb_w_pso.py --output_dir=DIR

Options:
    -o --output_dir=DIR             Directory of the output
'''
import functools
from multiprocessing import Pool
import ROOT
import sympy
import math
import random
import os
import json
import docopt
import numpy as np
from helper import read_cfg, save_results
from hyperevol.tools import particle_swarm as pso
from array import array

# coefficients for the parametrized mHH shape in the kl,kt,c2,cg,c2g HEFT space
theocoeffs = [
    [260.0, 0.0017041787836573525, 0.005859941413819426, 0.0011203511856240794, 0.0016326884261615745, 0.008528140326909796, -0.006294287901387375, -0.0027595385750596247, 0.005164913330395372, 0.006125179428023181, 0.014085783164070144, -0.003248623424659433, -0.00763769577847725, 0.0027011050795191375, 0.00623898517945767, 0.0075008431622157114, -4.0952526946401604e-05, 0.0002299913340205693, 9.768993003289037e-05, 0.0002359846439272683, -0.00010543564692487495, 0.00010874309248669732, 4.9999866115412877e-05, 0.00020776372612401524],
    [280.0, 0.0026701737658144224, 0.009641575575876925, 0.0013407699000322149, 0.0018586495587222848, 0.013583030183507306, -0.010045414783448291, -0.0037701275621863793, 0.0071773635297068955, 0.008482826056302815, 0.022857458072595704, -0.004467686270851129, -0.01188725708373393, 0.003161871482705535, 0.00848813591971999, 0.010048847891231498, -1.5470236391718055e-05, -0.000250174201927618, 8.35122572902979e-06, -0.00012650212768802033, 5.9092868090122365e-06, 0.00017992007475443043, 0.00019744952687983413, 0.0002521825660316199],
    [300.0, 0.003202302654400875, 0.01166480588273754, 0.001164119045806091, 0.0014975235579723638, 0.014914484251247187, -0.012119741817309479, -0.003836674206975027, 0.007348945482105774, 0.008310656542328286, 0.026316948944860776, -0.004255102300414, -0.01344385703997757, 0.0026224043313630785, 0.00825850745878993, 0.00940432748731208, -4.430824413963636e-05, -3.861317278333028e-05, 1.7037739017564314e-05, -1.5058838024140557e-05, -4.09996732788198e-05, 0.0001734805263560755, 2.2445784167531723e-05, 9.982447575927623e-05],
    [320.0, 0.0037070888054074594, 0.013526562009033048, 0.0009860022912248966, 0.001120964165652605, 0.015412026969016305, -0.01412034920559067, -0.0038007120301994358, 0.007304632581868017, 0.00778118021788305, 0.028704952555777236, -0.0039957473370460074, -0.014942031394796511, 0.002102708654579697, 0.007781141208810707, 0.008349610946151338, 9.826035044418572e-06, 0.00016444705653514795, 8.34045349995078e-05, 8.58812141045889e-05, -0.00012222450246099692, 5.3513965048271385e-05, -2.6665496762644965e-05, 0.00010414665884728314],
    [340.0, 0.004528186146229054, 0.015776509537907556, 0.0008661742883851624, 0.0008157155061369802, 0.015207309417638202, -0.01680382343013117, -0.00393816691116918, 0.007359623009095108, 0.007120233686798664, 0.030889623941827503, -0.0037543200181926555, -0.016245436179805575, 0.0016814402971210042, 0.007211521789228554, 0.0070953531729846435, -9.164917524558954e-05, 0.00023655772128602294, 0.00014301069517635862, 0.0001657546519475889, -0.00012873537420182552, 0.000156781999545895, 4.4937183484266524e-05, 0.0002179400124378254],
    [360.0, 0.006014767623550548, 0.019268383981403098, 0.0008251602151864947, 0.0006290919004620993, 0.0148867420375968, -0.02128513800727116, -0.004423611542374383, 0.007946206822159952, 0.006893427305379884, 0.033558466347643916, -0.00371309872640451, -0.018197459025304515, 0.001417477283809273, 0.006898637883587257, 0.006134749465070945, -6.4570700515661385e-06, -6.227298699586837e-05, 4.768380228062309e-05, -9.218831153988382e-05, -0.00020490210383071244, 0.0003164057150815777, 5.227464190361755e-05, 0.00024708229364055206],
    [380.0, 0.006195202372978658, 0.021038824176200194, 0.000693900467721063, 0.0004775961817752065, 0.014360317446908497, -0.022515597386649037, -0.004087615703062863, 0.0076489632677647764, 0.006141235607668273, 0.033851271882565495, -0.003141500626809114, -0.017430571785241045, 0.0011258790955413081, 0.006180072402850876, 0.005208577141253698, -0.00012597181014208816, 0.00022440556881776034, 8.917817198419119e-05, 0.00016361275914844606, -1.6895337278670277e-05, 4.6797427428779524e-05, -5.861288585666503e-05, -7.429981604053099e-06],
    [400.0, 0.005625681791920558, 0.020886187544588923, 0.0005503148232253406, 0.0003574696764674285, 0.013618701874497765, -0.021152752834192507, -0.0034337285165898165, 0.006795628047367479, 0.005234181685871833, 0.03199746348904904, -0.0024089076903136696, -0.015083903676200943, 0.0008466703047661935, 0.005228791167247915, 0.004399502766663645, -0.00014039627765623735, 9.363923251456515e-05, 7.553163704433427e-05, 0.0003635826103397412, 2.0552524641133992e-05, 0.00016288838409242478, -1.866328802864833e-05, 8.312128405134575e-05],
    [420.0, 0.00487106337128088, 0.019965067117786946, 0.0004205619495805963, 0.0002923040609776667, 0.012951281640108128, -0.01907309456109794, -0.002769647535288329, 0.005806106043764664, 0.004291306903666136, 0.029464195587216094, -0.001816443973295576, -0.012438651223975838, 0.0006221389993804449, 0.004287374303793654, 0.0037831861420050523, -8.95553079782195e-06, 8.237900498190869e-05, 1.0328354966059462e-05, 1.8249243830883694e-05, -8.305310043878878e-05, 0.00014211082289739406, 4.831635354392115e-05, 0.0001866409099472078],
    [440.0, 0.004074226303567388, 0.018457376957003835, 0.00031875171851323804, 0.00021009329480318133, 0.012293134943384416, -0.016599945448287738, -0.002180420847041839, 0.0048743520915623655, 0.0035449354671298356, 0.026430490794864214, -0.0013219763820661783, -0.010024795446095655, 0.00046010423947082335, 0.003491929009875999, 0.0032700367923850443, -2.888819880649111e-05, -0.0002849732388530511, -1.718331884554864e-05, -0.000107522864229939, 3.466359652283172e-05, 0.00020812529631389457, 2.8929354850186744e-05, 8.730982598073077e-05],
    [460.0, 0.0033920545008752417, 0.016831059684164405, 0.00024188826111776982, 0.00017746669187039147, 0.011643926590182999, -0.014304982725453495, -0.0017210510119285828, 0.004048192137556906, 0.0028533254607120296, 0.023374301243907342, -0.0009614360290756637, -0.007837794848422158, 0.0003357205101328122, 0.0028039425516502813, 0.0028401032790803015, 0.00011535557327080674, -3.748117168829002e-05, -5.056091214877324e-05, -0.00024560815525547506, -8.583937644684976e-05, 7.251294178439236e-05, 3.009605368282746e-05, 0.00020945505595120162],
    [480.0, 0.0027747942267250876, 0.01513451189435951, 0.00018225368951733047, 0.0001387028965821668, 0.010990096972271794, -0.012175259595754908, -0.0013380653445049964, 0.003314450360112302, 0.0022799363659261667, 0.02058836390739802, -0.0006985779194936918, -0.006143836392154579, 0.0002567013388335615, 0.002271047514096525, 0.0024443993306042145, 9.726781802034449e-07, -0.00011073472595341995, -1.911634199390494e-05, -0.00011981426875766496, 4.26564092218007e-05, 0.00010796758134839534, -2.4124212402015614e-05, -5.447258050654931e-06],
    [500.0, 0.002251548240364516, 0.013516074371304228, 0.0001385724376214339, 0.000100879282208368, 0.010244074076747926, -0.010282934122462542, -0.001039504649333218, 0.00272436747545986, 0.0017825475967974257, 0.01782417023030993, -0.0004813589297461696, -0.0047172085646187195, 0.00017822187973970548, 0.0018012795916847839, 0.0020298037071355413, 5.7582486477507283e-05, -6.58989660834554e-05, -5.520770607188481e-06, 2.9156609523385496e-05, -9.64030476610288e-05, 0.00019040647465663472, 5.655359684148819e-05, 0.0002118037765374681],
    [520.0, 0.001823570615562129, 0.012157024860492742, 0.00010095779327959523, 7.811143615573297e-05, 0.009633133340017933, -0.008694371864974116, -0.0007940927379824825, 0.002218026105049743, 0.0014276420046495865, 0.01557485289069697, -0.000360871147001338, -0.0035196200862783033, 0.00013815230837145018, 0.001412372706729055, 0.0017350085390457483, -5.747170330287902e-05, -0.00014807290967505844, 9.29125159062407e-06, 0.000123858815556651, 6.225873233399736e-05, 0.00016900788522761535, 5.255384765879675e-05, 9.17342591273252e-05],
    [540.0, 0.0014996962016684263, 0.010737877263867492, 7.868487416725161e-05, 5.684494746444438e-05, 0.009125928567562194, -0.007357752584322514, -0.0006293380713645332, 0.001823660467122222, 0.0011665603166061448, 0.013510478097222101, -0.00021414519506673596, -0.002745669207668807, 0.0001024134495070952, 0.0011700988699628817, 0.0015209532629137125, -5.229232547162508e-05, 0.00021604848085193053, 0.00011157219466151642, 0.00028239052167068905, -8.056968541521415e-05, 2.787976926432505e-05, -6.95079557779656e-05, -4.784488672313464e-05],
    [560.0, 0.0012066050068671144, 0.00959826925700922, 5.945570036517686e-05, 6.919594428382745e-05, 0.008463229305562467, -0.00622502013326936, -0.0004880422508738647, 0.001504195025078554, 0.0009757913084185356, 0.011715877671441355, -0.00019434143789447716, -0.0018924194696596757, 8.322743148640584e-05, 0.0009008391661716117, 0.0013373792280147107, -1.6974646977410008e-05, 3.339265892203083e-05, 1.7845751974920757e-06, -1.4306344578189168e-05, 5.751908118585287e-07, 1.1004102694334517e-05, -9.356085621429783e-06, 3.133107469994369e-07],
    [580.0, 0.0009882123185436396, 0.008549018382554287, 4.737374017819241e-05, 3.95851650190152e-05, 0.008079988437256493, -0.005255433257970076, -0.0003897024012500071, 0.0012474300327381554, 0.0007792458897627103, 0.010291931886451899, -0.00013136405154188325, -0.0015031531875488741, 6.286839539679691e-05, 0.0007840688527416116, 0.0012560094803815312, -2.6216102744381794e-05, -0.00014976944500073812, 1.2765313439703883e-05, -3.4245192219696874e-05, 0.0001401620211583395, 1.779554120467744e-05, -2.314874776668057e-05, 3.86173361757642e-05],
    [600.0, 0.0008109999011695286, 0.007548959620780305, 3.513280277040359e-05, 3.1781135003220035e-05, 0.007618738193351698, -0.004515439184179787, -0.0003045568465849185, 0.0010373617802400222, 0.0005977090932027305, 0.008764806293922093, -5.094412802304869e-05, -0.000934623952884818, 3.8007686100340316e-05, 0.0005775866121699774, 0.0010626298035790048, -1.614547325123354e-05, 0.00011598606201418027, 2.6957845736663488e-05, -3.705925254164425e-05, 1.2366422457065542e-05, -6.202461249896324e-06, -3.533524506192309e-05, 5.311881010888864e-05],
    [620.0, 0.0006633404205623204, 0.006677137584447574, 2.65320856168752e-05, 2.8825452987316673e-05, 0.007147969249705939, -0.003709847355177571, -0.00023779767248709223, 0.0008251082273314348, 0.00047138906659198915, 0.0075241808382903565, -5.29309323061228e-05, -0.0006478021401681817, 2.7944823175996343e-05, 0.0004733401947541079, 0.0009188856584436883, 5.9872302312680584e-05, -0.0001725893243367489, -5.9513075606222046e-06, 3.3432641073570884e-05, -8.535227495523003e-05, 0.00019073229505250268, 5.508421375380532e-05, 9.713940134109e-05],
    [640.0, 0.000554638521858824, 0.0059428886711963575, 2.1631902572992717e-05, 1.9012707517564996e-05, 0.006813760897783277, -0.0032330723577615092, -0.00019387980733564099, 0.0007167561749836187, 0.0003800228244973719, 0.006580233983949705, -6.650256417642039e-06, -0.00038957342944833105, 2.20688430737408e-05, 0.0003862667151760636, 0.0007758392249076737, -2.6443047847942602e-05, 0.0002146672472214314, 3.2183507946655386e-05, 9.857351370425297e-05, -8.943781823581799e-06, -5.2478080182370334e-05, -3.2323996715550056e-05, -2.2462159773534354e-05],
    [660.0, 0.0004520760732000959, 0.0052741031288586065, 1.533736986546042e-05, 4.853936978821074e-06, 0.006392459259873226, -0.0027442302225504276, -0.00014763979792028386, 0.0005745262244278641, 0.00023871867711381067, 0.005598893964335446, 2.1032820903536775e-05, -8.127570437352986e-05, 6.8889087643576125e-06, 0.0002712802473169119, 0.0006872074165893911, -2.937307111932855e-05, 0.00023505787018479198, 4.277193700963746e-05, 4.306169579295369e-05, -3.369442221664216e-05, -8.111779978378468e-05, 1.9384949280027905e-05, 4.6991456758942177e-05],
    [680.0, 0.0003789969250979674, 0.0046744799916137595, 1.237865854298293e-05, 5.357438246276643e-06, 0.005986830736925096, -0.002358927228606696, -0.00012003881394645743, 0.0005022452626947724, 0.00022073567641369711, 0.0046932104626348945, 2.747889785331941e-05, -5.8096895841177967e-05, 5.379797457255485e-06, 0.0002256063064658296, 0.0005985188378424134, 2.1917813195077635e-05, 7.834926744899803e-06, -3.346749054701083e-06, -3.1974209211408196e-05, -3.818173088911015e-05, 2.54004742153059e-05, 3.9669696393794995e-06, 0.00011367776141429602],
    [700.0, 0.0003168147643676385, 0.004121250581992241, 9.213477565480208e-06, 2.0229082881468096e-05, 0.005684866612899963, -0.0020117579454010364, -9.641032439747906e-05, 0.00041056369451691167, 0.00017485999448503499, 0.004075122434447122, -2.8379139999529273e-06, 6.786005345992806e-05, 8.631353794360667e-06, 0.00019824474914311907, 0.0005615392985789859, 2.2286578734517035e-05, 2.413817670528446e-05, -1.8439907950168084e-05, -8.070045870955857e-05, -3.1606573390244494e-05, 7.178711373175308e-05, 1.9209523726442685e-05, 0.0001337002013914985],
    [720.0, 0.0002641949899192597, 0.003662027673938593, 8.358576244688358e-06, 2.0442831552258565e-05, 0.005336037703669426, -0.0016676576973495168, -8.21062098266422e-05, 0.00033318633709403635, 0.00014209705322700897, 0.0034069028085348244, -2.0788968109553543e-05, 2.55197637591012e-05, 1.365235801438562e-05, 0.00017779819843278844, 0.00048730190046687965, 2.178624800735569e-05, 4.167558942631905e-05, -2.8076952348544813e-05, 9.283824751806267e-05, 1.7126344300908833e-05, 1.1493762264569472e-05, 1.2436602191882806e-05, 7.679717382450454e-05],
    [740.0, 0.00022127944687803713, 0.0032447371406537718, 5.867205360606414e-06, 1.9850409189641902e-05, 0.0050696288243670135, -0.001462815526387166, -6.243242543059719e-05, 0.0002939366551151744, 0.00013225853077373205, 0.0029978750376061787, -2.0014989324494606e-05, 9.486743650306709e-05, 1.1810065186218277e-05, 0.000150459435468624, 0.00043617829438744184, 1.2877629877694586e-05, 1.0067511180611881e-05, -2.001129843699759e-05, 2.2687168849092624e-05, -7.455788760433855e-06, 2.3847445728327237e-05, 1.3455846004431507e-05, 9.499128825017351e-05],
    [760.0, 0.00018898611191291856, 0.002945882786039208, 5.5029221631849356e-06, 1.9815309502137463e-05, 0.004708140159308674, -0.0013127147155290934, -5.5932029239414105e-05, 0.00026947899706905554, 0.00013427126769752413, 0.0026663218013690624, 4.390318082167032e-06, 0.00014976008662534487, 7.322314527787069e-06, 0.00012759888899189025, 0.0004400965479290652, 1.3115885676911384e-05, 8.596228864767187e-05, -1.948707413328901e-05, -1.678730782827463e-05, -8.743679350007026e-06, -1.650769820294578e-05, -7.299887000640986e-06, 1.9612862440237635e-05],
    [780.0, 0.00014871372960666032, 0.0026068316910563285, 3.7162775434869138e-06, 5.885434154292375e-06, 0.004444490936196515, -0.001068985909344842, -3.972805524385229e-05, 0.00020782161505117843, 0.00011128812200998367, 0.00226187146706653, 3.0687162597565294e-05, 0.0002353629628205077, 1.597793494924608e-06, 7.566737542353444e-05, 0.0003814765661155705, -4.267778946722202e-05, -2.60309442093212e-06, 1.5216217219617495e-06, -3.503423917546418e-05, 4.77619579738934e-05, -2.6457534578966516e-05, -2.3771070073168232e-05, 2.0811922296431706e-05],
    [800.0, 0.00012868918915090886, 0.002353872483219198, 3.4392571616137285e-06, 1.208365010598042e-05, 0.004194306506958917, -0.0009679405997549662, -3.437860593479149e-05, 0.00019957076417057308, 9.509230490953209e-05, 0.001962344655942601, 8.732328410121435e-06, 0.00017980104802153046, 4.36671160045372e-06, 9.30845854136211e-05, 0.00036603653524406877, 8.459596780082928e-06, 2.9503311819305476e-05, -2.7049347782039432e-05, -5.487286325267844e-05, 3.1568725412676637e-06, -4.3179536161833906e-05, 1.0744251391324926e-05, 5.3422126964377974e-05],
    [820.0, 0.00011102592064873919, 0.0020396336869933115, 2.7580956808578063e-06, 7.466838622537943e-06, 0.004027196165391449, -0.0007737729125214196, -2.896614210878543e-05, 0.000146646494666202, 4.975791338765864e-05, 0.0015959533989207285, 8.821213995657758e-06, 0.0002637627547606376, 2.7807675570589354e-06, 5.226027908084232e-05, 0.000291120503039103, -6.867142047378399e-06, 2.1766632276697122e-05, -7.502903435001279e-06, -9.093446023171426e-06, -3.895150050263104e-06, -6.749724669822108e-06, 9.543748682815505e-06, 7.434932520266214e-05],
    [840.0, 9.70685661061516e-05, 0.0019031367711183878, 2.226900404157802e-06, 1.4779287390580567e-06, 0.0037851381534801886, -0.0007396913586374402, -2.4903239830495895e-05, 0.0001388569669334459, 7.2824636986809e-05, 0.0014447933802992235, 1.7452975468288035e-05, 0.00020118946669675275, 1.3863531456300978e-06, 5.915100583901812e-05, 0.00029645126835798474, -2.3219168470211146e-05, 1.0108329815680765e-05, 2.898777481082652e-05, -5.4403386973438855e-06, 1.3161507926157917e-05, 9.64025067532277e-06, -1.751505449658601e-05, 5.619740003957344e-05],
    [860.0, 7.49250259048326e-05, 0.0017119905001389535, 1.2813532422108592e-06, 2.1606587268316994e-06, 0.003615315218031508, -0.0006186425304863789, -1.5919320359681526e-05, 0.00012165240168901954, 6.586491973048541e-05, 0.0012609135843310159, 1.4413644419250627e-05, 0.0002347010687620463, 1.018414323167154e-06, 4.83072210738755e-05, 0.00025097520057484456, -4.4956257642363414e-07, -3.027382968669661e-05, 3.481875258925913e-08, 6.210944799581295e-06, 4.9438839070820186e-05, -4.7147789659192115e-05, -3.0179046500180832e-05, -1.855826574446424e-05],
    [880.0, 6.795251486748323e-05, 0.0014832861054084722, 1.631946787451523e-06, 6.055833994358493e-06, 0.003396212586714018, -0.000514557706245037, -1.6897405565139368e-05, 8.405263141686796e-05, 2.15232811405841e-05, 0.0009932594739908772, -4.419997703627544e-06, 0.00024506309870680007, 3.3756429108847017e-06, 3.7145365047983396e-05, 0.0002064811600286208, 6.737549831139153e-06, -2.8889939363762767e-05, -3.858487369426459e-06, 2.2433426484266272e-05, 6.8257652720738885e-06, 9.565642467033395e-06, -3.5435252735162366e-06, -1.638546241988072e-05],
    [900.0, 5.9125855228308616e-05, 0.0013057372619539596, 1.1591619070161062e-06, 2.8100113713519914e-06, 0.003194966385017607, -0.00042288457256343357, -1.3474092024297484e-05, 6.574129460456402e-05, 1.759049978946892e-05, 0.0007986590368084354, 1.73053767941672e-05, 0.00027217040169432685, -1.1334303701589354e-06, 1.0175318264274322e-05, 0.00015528977431410884, 3.56002997422527e-06, 5.0236939587700055e-05, 1.1921328944744195e-05, 9.369069013655228e-05, -1.4117082180271396e-05, 4.953888856176704e-06, -1.742183376929312e-05, -2.8248662858281096e-05],
    [920.0, 4.580540116136655e-05, 0.0012129052574611613, 9.632364466658482e-07, 7.401346133510598e-06, 0.003004102476291788, -0.00041596844767284813, -9.564996637371738e-06, 7.045355223047115e-05, 3.144157471122305e-05, 0.0006979300266189327, -1.2097778979866114e-05, 0.00024501637326284265, 4.967181283631278e-06, 1.4855728723109388e-05, 0.00012108291788855578, -1.4810377967965303e-06, 5.316763462693222e-05, 1.1431046905040556e-05, 0.00015618247635572967, 5.675166538227594e-06, -2.3780742854184188e-05, -2.511395331690948e-06, -1.1971246774680941e-06],
    [940.0, 4.019481969979935e-05, 0.0011118432313297854, 5.254972059292129e-07, -2.861301889080449e-06, 0.0028841779368394835, -0.0003551969215149842, -7.754318580375551e-06, 6.260198304460957e-05, 2.1576370505097473e-05, 0.0006251150663835357, 1.7956827573764714e-05, 0.00025028896430003976, -2.063400977972371e-06, 9.681922035667939e-06, 0.0001541496733622153, -1.5438045381889205e-05, 8.959381894238897e-07, 5.409677326941497e-06, -4.0872418752934154e-05, 3.42160741502437e-05, -9.359388302219915e-06, -1.4225411334694274e-05, 2.9706461177600506e-05],
    [960.0, 3.540589226814791e-05, 0.0010318756619273866, 7.522841605536395e-07, 5.4209742961117975e-06, 0.002722750818112351, -0.00034539445755683433, -8.130893129413906e-06, 7.4961214833677e-05, 6.577358030757154e-05, 0.0005202748225586629, 8.132273897540796e-06, 0.00017057341046865238, 2.7939644268150843e-06, 2.2184513215685735e-05, 0.00017795297197000605, -2.8339593290796313e-06, -6.931230778708574e-05, -3.931092739193624e-06, -3.858195655349558e-05, 5.263937851645162e-05, -3.0749209603073586e-05, -3.961364459415165e-05, -5.468885578974383e-06],
    [980.0, 2.9327525849550416e-05, 0.000894938578794534, 1.3179227898590746e-07, 3.24852639734742e-06, 0.00261280510148034, -0.00027029282186243335, -3.884277855203659e-06, 5.466296005972076e-05, 2.6246125088523204e-05, 0.00041879746689303497, 7.0813278210973e-06, 0.00014413525672621018, 3.8423053055513106e-07, 2.2906907219495895e-05, 0.00013403491385647774, 1.3338325271076207e-05, -2.6702431303854755e-05, -8.276136689366826e-06, 8.693675760445593e-06, 7.0624777052200164e-06, 9.69765828238122e-06, -7.116763943225674e-06, 5.563435045653456e-05],
    [1000.0, 2.7345551391326878e-05, 0.000802044310527658, 6.102214804179038e-07, -3.638838080257745e-06, 0.0025390456633257227, -0.00022869703898727235, -6.005418577831738e-06, 3.361327079898581e-05, -1.6859211306366704e-05, 0.00038827393140317156, 3.281398862105447e-06, 0.00022008080438831886, -4.922264722524843e-07, 4.686518983281833e-06, 0.0001090943521846878, -1.0854881639277983e-05, 3.01155708382504e-05, 8.464882095608402e-06, 2.792782613264128e-05, -1.849789165201574e-05, 2.8470076897122954e-05, 2.3149200668994393e-05, 4.429324783132944e-06],
    [1020.0, 2.6106914896058364e-05, 0.000687471665480374, 7.939296708181888e-07, 2.456615681703156e-06, 0.0023826980857668645, -0.00018629471223163122, -6.755569688513553e-06, 2.5024006454061504e-05, -1.860240899196996e-05, 0.0002907047414413008, 1.1063825802428015e-05, 0.0002283008800841089, -9.345718844065799e-07, -9.838261688410316e-06, 0.00010298209884296764, 1.3669438766942449e-05, 1.586860434717735e-05, -5.719756015457809e-06, -6.250627088158901e-06, -2.1804028718894416e-05, 2.5242587523740226e-05, 3.0205092457190286e-06, 1.7700864865436713e-05],
    [1040.0, 2.3980185739884032e-05, 0.0006548177898039183, 5.613067131694697e-07, -1.2849196152649965e-06, 0.0022799318462762342, -0.00015974012937064255, -5.416970282848307e-06, 2.3897822340558758e-05, 5.4527361044383734e-06, 0.00026888654013346755, 1.1607925232827236e-05, 0.00020153889002257533, -2.860675676181077e-06, -3.1408082678416243e-06, 0.00011998728304943102, 1.8793602518871887e-05, -5.4124278671830334e-05, -9.799525926722501e-07, -6.173922433075673e-05, -3.463189690500673e-05, 3.605295621861787e-05, 1.048742375766019e-05, 2.664755439910117e-05],
    [1125.0, 0.00010390173155609495, 0.003301685793996548, 2.068256461134036e-06, 1.1406842887507455e-05, 0.013873557609298242, -0.0007760187979062942, -2.0720309744436597e-05, 0.0001281548687217872, -2.127723356719158e-05, 0.0005990937309124002, -1.7026566733068498e-06, 0.0009894704842875086, 3.6448655968533672e-06, 1.9272132276420904e-05, 0.0005198804913763673, 3.079424078020726e-05, 5.9358316764496696e-05, -2.515460215154916e-05, -4.876341270652518e-05, -3.062789097579764e-05, -2.95918133080495e-05, 4.818557121794414e-05, 0.00020610396878797046],
    [1300.0, 5.1130672646594986e-05, 0.0021110727693233956, 7.973001541847195e-07, 3.815376790050197e-06, 0.012201915897584915, -0.0004380643122587313, -8.36197371348781e-06, 7.850845942183268e-05, 4.547666083452669e-07, -0.0003855927924018085, -2.8647957127553336e-05, 0.0006952846219619157, 6.187242924172599e-06, 1.432270417855549e-05, 0.00029258596529439736, 2.36440041129965e-05, 1.367348017090276e-05, 1.29978433119328e-05, 0.0001684717397975936, -4.449358308800523e-05, -4.2566398524723325e-05, 4.5177515320243574e-05, 7.499345344380554e-05],
    ]

# mhh bins
mHH = []
for t in theocoeffs:
    mHH.append(t[0])

# total xs coeffs
xscoffs = [0.06149445582502288,
 0.3136672029876887,
 0.009301808057440153,
 0.009795448621341175,
 0.35145334073835405,
 -0.2559133980849674,
 -0.04296432612700188,
 0.09085341492517679,
 0.0782758166292356,
 0.4489365969942281,
 -0.03517971157073585,
 -0.16202459507304207,
 0.018071792664938892,
 0.07830485152133954,
 0.08840058043879137,
 -0.0002544699820427092,
 0.0006506059098975965,
 0.0005760121632388893,
 0.0009511381868594431,
 -0.0008664442180013471,
 0.002169652647647945,
 0.000422901508452418,
 0.003354598203554643]

# calculate differential/toal XS given input coeffs
def calcXS(coeffs, kl, kt, c2, cg, c2g):
    cg = cg/1.5
    c2g = -c2g/3
    xs = coeffs[0]*kt*kt*kt*kt
    xs += coeffs[1]*c2*c2
    xs += (coeffs[2]*kt*kt+coeffs[3]*cg*cg)*kl*kl
    xs += coeffs[4]*c2g*c2g
    xs += (coeffs[5]*c2+coeffs[6]*kt*kl)*kt*kt
    xs += (coeffs[7]*kt*kl+coeffs[8]*cg*kl)*c2
    xs += coeffs[9]*c2*c2g
    xs += (coeffs[10]*cg*kl+coeffs[11]*c2g)*kt*kt
    xs += (coeffs[12]*kl*cg+coeffs[13]*c2g)*kt*kl
    xs += coeffs[14]*cg*c2g*kl
    xs += coeffs[15]*kt*kt*kt*cg
    xs += coeffs[16]*kt*c2*cg
    xs += coeffs[17]*kt*cg*cg*kl
    xs += coeffs[18]*kt*cg*c2g
    xs += coeffs[19]*kt*kt*cg*cg
    xs += coeffs[20]*c2*cg*cg
    xs += coeffs[21]*cg*cg*cg*kl
    xs += coeffs[22]*cg*cg*c2g
    return xs

# calc tot XS
def calcTotXS(kl, kt, c2, cg, c2g):
    return calcXS(xscoffs, kl, kt, c2, cg, c2g)

# calx differential mHH dist
def calcXSDist(kl, kt, c2, cg, c2g, kSM=1.115):
    xslist = []
    mhhlist = []
    theo = theocoeffs
    for t in theo:
        if len(t) != 24: continue
        mhhlist.append(t[0])
        xslist.append(kSM*calcXS(t[1:], kl, kt, c2, cg, c2g))
    xslist = np.array(xslist) * (1/sum(xslist))
    return xslist, (mhhlist+[5000])

# key for histo naming
def makeKey(kl, kt, c2, cg, c2g, samplesize):
    return "kl_{0}_kt_{1}_c2_{2}_cg_{3}_c2g_{4}_{5}events".format(kl, kt, c2, cg, c2g, samplesize)

# make toyMC out of differential mHH dist
@functools.lru_cache(None)
def calcDist(kl, kt, c2, cg, c2g, kSM=1.115, samplesize=5000):
    key = makeKey(kl, kt, c2, cg, c2g, samplesize)
    xs, mhhs = calcXSDist(kl, kt, c2, cg, c2g, kSM)
    random.seed(12345)
    data = random.choices(mhhs[:-1], weights=xs, k=samplesize)
    h = ROOT.TH1D(key, key, len(mhhs)-1, array('d', mhhs))
    h.Sumw2()
    weight = 1000*calcTotXS(kl, kt, c2, cg, c2g)*138/samplesize
    for d in data: h.Fill(d, weight)
    return h

# make test points randomly distributed in the HEFT space to test out basis
@functools.lru_cache(None)
def makeTestSet(seed=12345678, size=5000):
    random.seed(seed)
    toys = []
    for i in range(size):
        kl = random.randrange(-150,150,1)/10.
        kt = random.randrange(-50,50,1)/10.
        c2 = random.randrange(-50,50,1)/10.
        cg = random.randrange(-50,50,1)/10.
        c2g = random.randrange(-30,30,1)/10.
        calcDist(kl, kt, c2, cg, c2g)
        toys.append([kl, kt, c2, cg, c2g])
    return toys

# matrix element dependency on POIs
def func5D(sample):
    return [
    sample[0]**2 * sample[1]**2,
    2*sample[0]**2 * sample[1] * sample[3],
    sample[0]**2 * sample[3]**2,
    2*sample[0] * sample[1]**3,
    2*sample[0] * sample[1]**2 * sample[3],
    2*sample[0] * sample[1] * sample[2],
    2*sample[0] * sample[1] * sample[4],
    2*sample[0] * sample[2] * sample[3],
    2*sample[0] * sample[3] * sample[4],
    sample[1]**4,
    2*sample[1]**2 * sample[2],
    2*sample[1]**2 * sample[4],
    sample[2]**2,
    2*sample[2]*sample[4],
    sample[4]**2,
    ]

# func to calc factors for linear combination of input shapes
def model_5D(inputs, kl, kt, c2, cg, c2g):
    M = sympy.Matrix([
         func5D(sample)  for i, sample in enumerate(inputs)
        ])
    c = sympy.Matrix(func5D([kl, kt, c2, cg, c2g]))
    M_inv = M.pinv()
    coeffs = c.transpose() * M_inv
    return [float(co) for co in coeffs]

# 15 point basis
b_15 = [[1, 1, 0, 0, 0],
 [1, 1, 0.7, 0, 0],
 [-2.5, 1, 0, 0, 0],
 [-10, 1, 1, 0, 0],
 [1, 1, -0.2, 0, -1.2],
 [1.0, 1.0, 0.0, -3, 3],
 [1.0, 1.0, 0.0, -0.5, -0.7],
 [1, 1.0, 1.0, 1, 0],
 [1, 1.0, 10.0, 1, 0],
 [1, 1.0, 0.0, 1, 0],
 [2.4, 1.0, 0.0, 0.2, -0.2],
 [1.0, 5.0, 0.0, 0, 0.0],
 [20, 1, 0, 0, 5],
 [1.0, 1.0, 1.0, -0.6, 0.6],
 [0.0, 0.0, 0.0, 0.0, 1]]

# TODO add 20/25 point basis

# translate particle hyperparameters into model basis, treat particle basis around fluctuation around initial basis
# TODO add cases for 20 / 25 point basis
def makebase(ipt):
    base = [ ]
    for j in range(int(len(ipt)/5)):
        s = str(j+1)
        base.append([ipt[c+s] for c in ["kl_","kt_", "c2_", "cg_", "c2g_"]])
    for j in range(len(base)):
        for i in range(len(base[j])):
            base[j][i] = base[j][i]/10. + b_15[j][i]
    return base

# calc mHH distribution via linear combination of input shapes
def calcDistModel(kl, kt, c2, cg, c2g, inputs, samplesize=5000):
    base = makebase(inputs)
    coeffs = model_5D(base, kl, kt, c2, cg, c2g)
    inputdists = []
    for i in base:
        kl_i, kt_i, c2_i, cg_i, c2g_i = i
        h_i = calcDist(kl_i, kt_i, c2_i, cg_i, c2g_i, samplesize)
        inputdists.append(h_i)
    key = makeKey(kl, kt, c2, cg, c2g, samplesize)
    h = inputdists[0].Clone(key)
    h.Reset()
    for ii in range(len(base)):
        h.Add(inputdists[ii], coeffs[ii])
    return h

# score for a single toy
def scoretoy(basis, toy):
    kl, kt, c2, cg, c2g = toy
    h1 = calcDist(kl, kt, c2, cg, c2g)
    h2 = calcDistModel(kl, kt, c2, cg, c2g, inputs=basis)
    KS = h1.KolmogorovTest(h2, "")
    stat = sum([abs(h2.GetBinError(i+1)/(h2.GetBinContent(i+1)+0.0000001)) for i in range(h2.GetNbinsX())])
    statref = sum([abs(h1.GetBinError(i+1)/(h1.GetBinContent(i+1)+0.0000001)) for i in range(h1.GetNbinsX())])
    STAT = stat/statref
    return KS, STAT

# actual score function, maximize this!
def scorefunc(ks, stat, ksstregth=0.5, statstrenght=0.5):
    return ksstregth*(math.log(ks)+1) + statstrenght*math.log(1/stat,10)

# score a given basis for all toys
def scorebasis(basis, toys):
    score = 0
    for it, t in enumerate(toys):
        if it % 100 == 0 : print("evaluating basis:", hash(str(basis)), ":", it, "/", len(toys))
        ks, stat = scoretoy(basis, t)
        score += scorefunc(ks, stat)
    score /= len(toys)
    return -1*score

# scores for all particles/basis
def ensemble_score(
        parameter_dicts,
        settings=None,
        toys=[],
):
    sb = functools.partial(scorebasis, toys=toys)
    pool = Pool(processes=25)
    print(len(parameter_dicts))
    out = pool.map(sb, parameter_dicts)
    return out

def main(output_dir: str) -> None:
    ''' Runs the particle swarm optimization to optimize the Rosenbrock function
    and saves the result to a file in the specified folder.
        Since no additional parameters need to be given to the Rosenbrock fn,
    then no additional 'settings=xyz' will be specified for PSO here.
        After optimization, the other logging info (e.g. score evolution) can
    be accessed easily by e.g "swarm.global_bests"

    Args:
        output_dir : str
            The directory where the output will be written

    Returns:
        None
    '''
    os.makedirs(output_dir, exist_ok=True)
    pso_cfg = read_cfg('config/pso_cfg.json')
    hyperparameters = read_cfg("config/mhh_15.json")
    toys=makeTestSet(size=2500)
    ensemble=functools.partial(ensemble_score, toys=toys)
    swarm = pso.ParticleSwarm(ensemble, hyperparameters, **pso_cfg)
    pso_best_parameters, pso_best_fitness = swarm.optimize()
    pso_best_fitness *= -1
    bestbasis = makebase(pso_best_parameters)
    print(f"Found optimal parameters: {bestbasis}")
    print(f"Found optimal value with optimal parameters: {pso_best_fitness}")
    print("--------------------------------------------------------")
    print("Saving results:")
    save_results(bestbasis, pso_best_fitness, output_dir)


if __name__ == '__main__':
    try:
        arguments = docopt.docopt(__doc__)
        output_dir = arguments['--output_dir']
        main(output_dir)
    except docopt.DocoptExit as e:
        print(e)

